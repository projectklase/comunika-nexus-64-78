// TODO: REGRA CR√çTICA - NUNCA usar hooks dentro de condicionais, loops ou fun√ß√µes aninhadas
// TODO: Sempre declarar hooks no topo do componente/hook customizado
// TODO: Ordem dos hooks deve ser sempre a mesma entre renders

import { useEffect } from 'react';

/**
 * Hook de desenvolvimento para detectar poss√≠vel uso incorreto de hooks
 * Apenas roda em modo de desenvolvimento
 */
export function useHookGuard(componentName: string = 'Unknown') {
  useEffect(() => {
    if (process.env.NODE_ENV !== 'development') return;

    // Verificar se h√° hooks sendo chamados dinamicamente
    const originalError = console.error;
    const originalWarn = console.warn;

    let hookViolationDetected = false;

    // Interceptar erros relacionados a hooks
    console.error = (...args) => {
      const message = args.join(' ');
      
      if (message.includes('Invalid hook call') || 
          message.includes('Hooks can only be called') ||
          message.includes('rendered fewer hooks')) {
        hookViolationDetected = true;
        console.warn(`üö® [${componentName}] HOOK VIOLATION DETECTED:`, message);
        console.warn(`üö® [${componentName}] Verifique se hooks n√£o est√£o em condicionais/loops!`);
        console.trace('Stack trace do erro de hook:');
      }
      
      originalError(...args);
    };

    // Cleanup
    return () => {
      console.error = originalError;
      console.warn = originalWarn;
      
      if (hookViolationDetected) {
        console.warn(`üö® [${componentName}] Componente teve viola√ß√µes de hooks - revisar c√≥digo!`);
      }
    };
  }, [componentName]);

  // Verifica√ß√£o adicional em desenvolvimento
  useEffect(() => {
    if (process.env.NODE_ENV !== 'development') return;
    
    console.log(`‚úÖ [${componentName}] Hook guard ativo - monitorando viola√ß√µes de hooks`);
  }, [componentName]);
}

/**
 * Fun√ß√£o utilit√°ria para verificar se hooks est√£o sendo chamados corretamente
 * Pode ser chamada manualmente durante desenvolvimento
 */
export function validateHooksUsage(componentName: string): void {
  if (process.env.NODE_ENV !== 'development') return;

  // Simular verifica√ß√£o de ordem de hooks
  const hookCallStack = new Error().stack;
  
  if (hookCallStack?.includes('conditional') || 
      hookCallStack?.includes('loop') ||
      hookCallStack?.includes('if (') ||
      hookCallStack?.includes('for (') ||
      hookCallStack?.includes('while (')) {
    console.warn(`üö® [${componentName}] POSS√çVEL VIOLA√á√ÉO: Hook pode estar em condicional/loop`);
    console.warn('Stack trace:', hookCallStack);
  }
}

/**
 * Wrapper para hooks que adiciona verifica√ß√£o autom√°tica
 */
export function withHookGuard<T extends any[], R>(
  hookFn: (...args: T) => R,
  hookName: string
) {
  return (...args: T): R => {
    if (process.env.NODE_ENV === 'development') {
      validateHooksUsage(hookName);
    }
    return hookFn(...args);
  };
}